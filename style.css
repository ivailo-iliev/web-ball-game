/* =======================
   Global resets
   ======================= */
/* A simple universal boxâ€‘sizing reset */
*,
*::before,
*::after {
  box-sizing: border-box;
}

html,
body {
  margin: 0;
  padding: 0;
  height: 100%;
  overflow: hidden;
  user-select: none;
  font-family: sans-serif;
}

:root {
  --clr-red: #EA4335;
  --clr-orange: #FBBC05;
  --clr-yellow: #FDD835;
  --clr-green: #34A853;
  --clr-blue: #4285F4;
  --clr-purple: #A142F4;
  --hue-red: 300deg;
  --hue-orange: 320deg;
  --hue-yellow: 0deg;
  --hue-green: 40deg;
  --hue-blue: 180deg;
  --hue-purple: 280deg;
}

/* ========= Layout ========= */
#container {
  width: 100dvw;
  height: 100dvh;
  overflow-y: hidden;
}

#container > div {
  position: relative;
  height: 100%;
  overflow: hidden;
}

#launcher {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  align-items: center;
  gap: 1rem;
  font-size: 4rem;
}

#launcher button {
  background: none;
  border: none;
  font: inherit;
  cursor: pointer;
}

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Layout â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
#configScreen {
  height: 100%;
  font-size: 1rem;
  line-height: 1;
  display: grid;
  place-content: center;
  gap: 1rem;                         /* consistent spacing */
  grid:
    "cfg  cfg"   auto               /* second row: full-width bar    */
    "top  front" 1fr                /* first row: two equal tracks   */
    / 1fr 1fr;         
}

#topCam   { grid-area: top; }
#frontCam { grid-area: front; }

/* Config-bar */
#cfg {
  grid-area: cfg;
  display: flex;
  flex-wrap: wrap;
  justify-content: left;
  align-items: flex-start;
  gap: .5rem;
  padding: 1rem;
}

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Cameras â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
.cam {
  position: relative;
  overflow: hidden;
  user-select: none;
}

.cam > canvas, .cam > video {
  position: absolute; inset: 0;/* stack them and make each fill the slot */
  width: 100%; height: 100%;   /* identical boxes for every layer        */
  object-fit: contain;         /* bottom layer (video/texture) keeps AR  */
}

.cam canvas:last-child { z-index: 1; }

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Numberâ€“spinner â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
button {
  user-select: none;
  font-weight: bold;
  font-size: 1.2em;
}

.num-spinner {
  display: inline-flex;
  align-items: stretch;
  border: 1px solid #ccc;
  border-radius: 4px;
  overflow: hidden;
}

.num-spinner input {
  border: none;
  text-align: center;
  outline: none;
}

.num-spinner button {
  border: none;
  background: #eee;
  min-width: 2rem;
  padding: 0;             /* square tap-targets */
}

.num-spinner button:disabled {
  opacity: .5;
  cursor: default;
}

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Minimum tap-size â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
button,
select,
input {
  font-size: 1rem;
  line-height: 1;
  min-height: 2rem;
  min-width: 2rem;
  padding: .5rem 0;
  border-radius: .5rem;
}

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Mode switches â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
#configScreen.onlyFront,
#configScreen.onlyTop {
  grid-template-columns: 1fr;
}

#configScreen.onlyFront { grid-template-areas: "cfg" "front"; }
#configScreen.onlyTop   { grid-template-areas: "cfg"   "top"; }

#configScreen.onlyFront #topCam,
#configScreen.onlyTop   #frontCam { display: none; }

/* #configScreen.onlyFront label[for^="team"],
#configScreen.onlyTop   label[for^="team"] { display: none; } */

#configScreen label[for^="top"],
#configScreen label[for^="front"] { display: none; }

#configScreen.onlyTop   label[for^="top"],
#configScreen.onlyFront label[for^="front"] { display: initial; }

#configScreen label[for=topUrl] {
  display: none;
}

/* Show it only when MJPEG is selected */
#configScreen label:has(#topMode option[value="mjpeg"]:checked) + label[for=topUrl] {
  display: initial;
}

/* ---- Scoreboard ---- */
#scoreboard {
  position: absolute;
  top: 10px;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 24px;
  background: rgba(255, 255, 255, .8);
  padding: 8px 16px;
  border-radius: 12px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, .2);
  z-index: 100;
  -webkit-user-select: none;
  user-select: none;
}
#scoreboard > span {
  --dot: "";
  color: inherit;
  -webkit-user-select: none;
  user-select: none;
}
#scoreboard > span::before {
  content: var(--dot);
  margin-right: .25rem;
}
/* team mapping */
#scoreboard > .red    { --dot: "ðŸ”´"; color: var(--clr-red); }
#scoreboard > .orange { --dot: "ðŸŸ "; color: var(--clr-orange); }
#scoreboard > .yellow { --dot: "ðŸŸ¡"; color: var(--clr-yellow); }
#scoreboard > .green  { --dot: "ðŸŸ¢"; color: var(--clr-green); }
#scoreboard > .blue   { --dot: "ðŸ”µ"; color: var(--clr-blue); }
#scoreboard > .purple { --dot: "ðŸŸ£"; color: var(--clr-purple); }

/* Game area */
#game {
  position: relative;
  height: 100%;
  overflow: hidden;
  margin: 0;
  padding: 0;
  contain: layout style size;
  -webkit-user-select: none;
  user-select: none;
}

/* Sprite */
.sprite {
  position: absolute;
  text-align: center;
  line-height: 1;
  pointer-events: auto;
  user-select: none;
  will-change: transform, opacity;
  display: flex;
  justify-content: center;
  align-items: center;
  transform-origin: center;
  --x: 0px;
  --y: 0px;
  transform: translate3d(var(--x), var(--y), 0) scale(1);
  width: var(--size);
  height: var(--size);
  font-size: var(--size);
}

.sprite.spawn { animation: spawn 0.3s ease-out; }
.sprite.pop   { animation: pop 0.2s ease-out forwards; }
.sprite.miss  { animation: miss 0.4s ease-out forwards; }
@keyframes spawn {
  from { transform: translate3d(var(--x), var(--y), 0) scale(0); opacity: 0; }
  to   { transform: translate3d(var(--x), var(--y), 0) scale(1); opacity: 1; }
}
@keyframes pop { to { transform: scale(0); opacity: 0; } }
@keyframes miss { to { transform: translate3d(var(--x), var(--y), 0) scale(1.5); opacity: 0; } }

/* Burst */
.burst {
  position: absolute;
  pointer-events: none;
  left: 0;
  top: 0;
}

.burst p {
  position: absolute;
  top: 0;
  left: 0;
  font-size: 24px;
  line-height: 1;
  will-change: transform, opacity;
  animation: none;
}

.burst.animate p {
  animation: particleMove var(--life, 1s) linear forwards;
}

@keyframes particleMove {
  from { transform: translate3d(0, 0, 0); opacity: 1; }
  to   { transform: translate3d(var(--dx), var(--dy), 0); opacity: 0; }
}

/* Points popup */
.points {
  position: absolute;
  left: 0;
  top: 0;
  z-index: 1000;
  font-size: 24px;
  font-weight: bold;
  line-height: 1;
  pointer-events: none;
  will-change: transform, opacity;
  transform: translate3d(var(--x), var(--y), 0) translate(-50%, -50%) scale(1);
  animation: pointsFade .5s ease-out forwards;
}

.points.red    { color: var(--clr-red); }
.points.orange { color: var(--clr-orange); }
.points.yellow { color: var(--clr-yellow); }
.points.green  { color: var(--clr-green); }
.points.blue   { color: var(--clr-blue); }
.points.purple { color: var(--clr-purple); }

@keyframes pointsFade {
  to {
    transform: translate3d(var(--x), var(--y), 0) translate(-50%, -50%) scale(1.5);
    opacity: 0;
  }
}

/* Ripple */
.ripple {
  position: absolute;
  width: 8vh;
  height: 8vh;
  border-radius: 50%;
  background: rgba(0, 162, 255, .3);
  transform-origin: center;
  transform: translate(-50%, -50%) scale(1);
  pointer-events: none;
  will-change: transform, opacity, box-shadow;
  box-shadow:
    0 0 0 0 rgba(0, 162, 255, .4),
    0 0 0 0 rgba(0, 162, 255, .3),
    0 0 0 0 rgba(0, 162, 255, .2);
  -webkit-user-select: none;
  user-select: none;
  filter: hue-rotate(var(--hue, var(--hue-blue)));
}
.ripple.animate { animation: ripple .8s ease-out; }

.ripple.red    { --hue: var(--hue-red); }
.ripple.orange { --hue: var(--hue-orange); }
.ripple.yellow { --hue: var(--hue-yellow); }
.ripple.green  { --hue: var(--hue-green); }
.ripple.blue   { --hue: var(--hue-blue); }
.ripple.purple { --hue: var(--hue-purple); }

@keyframes ripple {
  0% {
    transform: translate(-50%, -50%) scale(0);
    opacity: .6;
    box-shadow:
      0 0 0 0 rgba(0, 162, 255, .4),
      0 0 0 0 rgba(0, 162, 255, .3),
      0 0 0 0 rgba(0, 162, 255, .2);
  }
  60% {
    transform: translate(-50%, -50%) scale(1);
    opacity: .3;
    box-shadow:
      0 0 0 8vh  rgba(0, 162, 255, .4),
      0 0 0 12vh rgba(0, 162, 255, .3),
      0 0 0 16vh rgba(0, 162, 255, .2);
  }
  100% {
    opacity: 0;
    box-shadow:
      0 0 0 8vh  rgba(0, 162, 255, 0),
      0 0 0 12vh rgba(0, 162, 255, 0),
      0 0 0 16vh rgba(0, 162, 255, 0);
  }
}

/* ========= Winner Screen ========= */
.winner {
  display: flex;
  justify-content: center;
  align-items: center;
  --bg-angle: 0deg;
  background:
    repeating-conic-gradient(from var(--bg-angle),
      #ffcc4d 0deg 5deg,
      #ffb347 5deg 10deg),
    radial-gradient(circle at center, #ffe680 0%, #ff9900 100%);
  background-blend-mode: screen;
  animation: spinBg 20s linear infinite;
}

@property --bg-angle {
  syntax: '<angle>';
  inherits: false;
  initial-value: 0deg;
}

@keyframes spinBg {
  to { --bg-angle: 360deg; }
}

.winner svg {
  height: 100%;
  pointer-events: none;
}

.confetti,
.champagne {
  transform-box: fill-box;
  transform-origin: center;
}

.confetti {
  font-size: 60px;
  animation: confettiWiggle var(--t, 2s) ease-in-out infinite alternate;
  will-change: transform;
}

.confetti.c1 { --t: 2s; }
.confetti.c2 { --t: 2.3s; }
.confetti.c3 { --t: 2.6s; display: none; }
.confetti.c4 { --t: 2.1s; }
.confetti.c5 { --t: 2.4s; }

.champagne,
.medal { font-size: 150px; }

.wave {
  font-size: 40px;
  animation: wave 1s ease-in-out infinite;
}

.wave.w1 { animation-delay: 0s; }
.wave.w2 { animation-delay: .1s; }
.wave.w3 { animation-delay: .2s; }
.wave.w4 { animation-delay: .3s; }
.wave.w5 { animation-delay: .4s; }
.wave.w6 { animation-delay: .5s; }
.wave.w7 { animation-delay: .6s; }
.wave.w8 { animation-delay: .7s; }
.wave.w9 { animation-delay: .8s; }

@keyframes wave {
  0%, 100% { transform: translateY(0); }
  50%      { transform: translateY(-0.6em); }
}

@keyframes bounce {
  0%, 100% { transform: translate(-50%, -50%) translateY(.2em); }
  50%      { transform: translate(-50%, -50%) translateY(-1em); }
}

@keyframes confettiWiggle{
    0%   {transform:translate( 0px, 0px) rotate(-5deg) scale(1);}
    25%  {transform:translate( 1px,-1px) rotate( 5deg) scale(1.07);}
    75%  {transform:translate(-1px, 1px) rotate(-5deg) scale(0.95);}
    100% {transform:translate( 0px, 0px) rotate( 0deg) scale(1);}
}

.winner::after {
  content: 'ðŸ˜„';
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  font-size: 12em;
  animation: bounce 1.2s ease-in-out infinite;
  filter: hue-rotate(var(--hue, var(--hue-blue)));
}

.winner.red    { --hue: var(--hue-red); }
.winner.orange { --hue: var(--hue-orange); }
.winner.yellow { --hue: var(--hue-yellow); }
.winner.green  { --hue: var(--hue-green); }
.winner.blue   { --hue: var(--hue-blue); }
.winner.purple { --hue: var(--hue-purple); }
