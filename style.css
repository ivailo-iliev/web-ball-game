/* =====================================
   Global resets & variables
===================================== */
:root {
  /* color palette */
  --clr-red: #EA4335;
  --clr-orange: #FBBC05;
  --clr-yellow: #FDD835;
  --clr-green: #34A853;
  --clr-blue: #4285F4;
  --clr-purple: #A142F4;

  --spacing-1: .25rem;
  --spacing-2: .5rem;
  --string: 200px;
  --angle: 12deg;
  --period: 2.4s;
}

/* A simple universal box‚Äësizing reset */
*,
*::before,
*::after {
  box-sizing: border-box;
}

html,
body {
  margin: 0;
  padding: 0;
  height: 100%;
  overflow: hidden;
  user-select: none;
}

/* ========= Layout ========= */
#container {
  width: 100dvw;
  height: 100dvh;
  overflow-y: auto;
  scroll-snap-type: y mandatory;
  -webkit-overflow-scrolling: touch;
}

#container > div {
  scroll-snap-align: start;
  position: relative;
  height: 100vh;
  overflow: hidden;
}

/* Config screen grid */
#configScreen {
  display: grid;
  place-content: center;
  grid-template-columns: repeat(2, minmax(0, 1fr));
  grid-template-rows: 1fr 6rem; /* main area + control bar */
  grid-template-areas:
    "top  front"
    "cfg  cfg";
}

/* grid areas */
#topCam   { grid-area: top; }
#frontCam { grid-area: front; }
#cfg {
  grid-area: cfg;
  text-align: center;
  padding: 1rem;
}

/* Cameras */
.cam {
  display: grid;
  place-items: center;
  overflow: hidden;
  -webkit-user-select: none;
  user-select: none;
}

.cam canvas {
  grid-area: 1 / 1;
  max-width: 100%;
  max-height: calc(100vh - 6rem);
  border: 2px solid magenta;
  -webkit-user-select: none;
  user-select: none;
}
.cam canvas:first-child { z-index: 0; }
.cam canvas:last-child  { z-index: 1; pointer-events: auto; }

input[type="range"] {
  height: 2rem; /* matches Apple‚Äôs minimum recommended touch target */
}

/* ----- Mode switches ----- */
:is(#configScreen.onlyFront, #configScreen.onlyTop) {
  grid-template-columns: 1fr;
}
#configScreen.onlyFront {
  grid-template-areas: "front" "cfg";
}
#configScreen.onlyTop {
  grid-template-areas: "top" "cfg";
}
#configScreen.onlyFront #topCam,
#configScreen.onlyTop   #frontCam { display: none; }

/* ---- Scoreboard ---- */
#scoreboard {
  position: absolute;
  top: 10px;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  align-items: center;
  gap: 8px;
  font-family: sans-serif;
  font-size: 24px;
  background: rgba(255, 255, 255, .8);
  padding: 8px 16px;
  border-radius: 12px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, .2);
  z-index: 100;
}
#scoreboard > span {
  --dot: "";
  color: inherit;
}
#scoreboard > span::before {
  content: var(--dot);
  margin-right: var(--spacing-1);
}
/* team mapping */
#scoreboard > .red    { --dot: "üî¥"; color: var(--clr-red); }
#scoreboard > .orange { --dot: "üü†"; color: var(--clr-orange); }
#scoreboard > .yellow { --dot: "üü°"; color: var(--clr-yellow); }
#scoreboard > .green  { --dot: "üü¢"; color: var(--clr-green); }
#scoreboard > .blue   { --dot: "üîµ"; color: var(--clr-blue); }
#scoreboard > .purple { --dot: "üü£"; color: var(--clr-purple); }

/* Game area */
#game {
  position: relative;
  width: 100vw;
  height: 100vh;
  overflow: hidden;
  margin: 0;
  padding: 0;
  contain: layout style size;
}

/* Mole mode background */
#game.mole {
    background-color: #4f8a34;
  --hole-size: 40px;
  --hole1-x: -100vw; --hole1-y: -100vh;
  --hole2-x: -100vw; --hole2-y: -100vh;
  --hole3-x: -100vw; --hole3-y: -100vh;
  --hole4-x: -100vw; --hole4-y: -100vh;
  --hole5-x: -100vw; --hole5-y: -100vh;
  --hole6-x: -100vw; --hole6-y: -100vh;
  --hole7-x: -100vw; --hole7-y: -100vh;
  --hole8-x: -100vw; --hole8-y: -100vh;
  --hole-img: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text x='-20' y='50' font-size='100'>üï≥Ô∏è</text></svg>");
  background-image:
    var(--hole-img),
    var(--hole-img),
    var(--hole-img),
    var(--hole-img),
    var(--hole-img),
    var(--hole-img),
    var(--hole-img),
    var(--hole-img);
  background-repeat: no-repeat;
  background-size:
    var(--hole-size) var(--hole-size),
    var(--hole-size) var(--hole-size),
    var(--hole-size) var(--hole-size),
    var(--hole-size) var(--hole-size),
    var(--hole-size) var(--hole-size),
    var(--hole-size) var(--hole-size),
    var(--hole-size) var(--hole-size),
    var(--hole-size) var(--hole-size);
  background-position:
    var(--hole1-x) var(--hole1-y),
    var(--hole2-x) var(--hole2-y),
    var(--hole3-x) var(--hole3-y),
    var(--hole4-x) var(--hole4-y),
    var(--hole5-x) var(--hole5-y),
    var(--hole6-x) var(--hole6-y),
    var(--hole7-x) var(--hole7-y),
    var(--hole8-x) var(--hole8-y);
}

.sprite {
  position: absolute;
  font-family: sans-serif;
  text-align: center;
  line-height: 1;
  pointer-events: auto;
  user-select: none;
  will-change: transform, opacity;
  display: flex;
  justify-content: center;
  align-items: center;
  transform-origin: center;
  --x: 0px;
  --y: 0px;
  transform: translate3d(var(--x), var(--y), 0) scale(1);
  width: var(--size);
  height: var(--size);
  font-size: var(--size);
}
.mole .sprite {
  overflow: hidden;
  align-items: flex-start;
  transform: none !important;
  inset: auto auto var(--py) var(--px);
  will-change: height;
}

@property --mr {
  syntax: '<percentage>';
  initial-value: 0%;
  inherits: false;
}

.gem .sprite {
  mask-image: radial-gradient(
    rgba(0,0,0,1)   0%,
    rgba(0,0,0,0.5) var(--mr),
    rgba(0,0,0,0)   calc(var(--mr) + 10%)
  );
  transition: --mr 1s ease-in-out !important;
}

.particle {
  position: absolute;
  will-change: transform, opacity;
  font-family: sans-serif;
  font-size: 24px;
  text-align: center;
  line-height: 1;
  pointer-events: none;
  user-select: none;
  transform-origin: center;
  animation: particleMove var(--life, 1s) linear forwards;
}

@keyframes particleMove {
  from { transform: translate3d(0, 0, 0); opacity: 1; }
  to   { transform: translate3d(var(--dx), var(--dy), 0); opacity: 0; }
}


.burst {
  position: absolute;
  pointer-events: none;
  left: 0;
  top: 0;
}

.burst p {
  position: absolute;
  top: 0;
  left: 0;
  font-family: sans-serif;
  font-size: 24px;
  line-height: 1;
  will-change: transform, opacity;
  animation: none;
}

.burst.animate p {
  animation: particleMove var(--life, 1s) linear forwards;
}

/* ripple */
.ripple {
  position: absolute;
  width: 8vh;
  height: 8vh;
  border-radius: 50%;
  background: rgba(0, 162, 255, .3);
  transform-origin: center;
  transform: translate(-50%, -50%) scale(1);
  pointer-events: none;
  will-change: transform, opacity, box-shadow;
  box-shadow:
    0 0 0 0 rgba(0, 162, 255, .4),
    0 0 0 0 rgba(0, 162, 255, .3),
    0 0 0 0 rgba(0, 162, 255, .2);
}
.ripple.animate { animation: ripple .8s ease-out; }

@keyframes ripple {
  0% {
    transform: translate(-50%, -50%) scale(0);
    opacity: .6;
    box-shadow:
      0 0 0 0 rgba(0, 162, 255, .4),
      0 0 0 0 rgba(0, 162, 255, .3),
      0 0 0 0 rgba(0, 162, 255, .2);
  }
  60% {
    transform: translate(-50%, -50%) scale(1);
    opacity: .3;
    box-shadow:
      0 0 0 8vh  rgba(0, 162, 255, .4),
      0 0 0 12vh rgba(0, 162, 255, .3),
      0 0 0 16vh rgba(0, 162, 255, .2);
  }
  100% {
    opacity: 0;
    box-shadow:
      0 0 0 8vh  rgba(0, 162, 255, 0),
      0 0 0 12vh rgba(0, 162, 255, 0),
      0 0 0 16vh rgba(0, 162, 255, 0);
  }
}

.game.gem {
      background: 
        radial-gradient(circle at 30% 30%, rgba(255, 230, 180, 0.35) 0%, transparent 40%),
        radial-gradient(circle at 70% 70%, rgba(255, 220, 160, 0.3) 0%, transparent 50%),
        linear-gradient(#fceabb, #f8d098);
      background-repeat: no-repeat;
      background-size: cover;
}

/* ----- Spawn and Pop effects ----- */
.game.emoji .spawn { animation: emojiSpawn 0.3s ease-out; }
.game.emoji .pop   { animation: emojiPop 0.2s ease-out forwards; }

@keyframes emojiSpawn {
  from { transform: translate3d(var(--x), var(--y), 0) scale(0); opacity: 0; }
  to   { transform: translate3d(var(--x), var(--y), 0) scale(1); opacity: 1; }
}
@keyframes emojiPop {
  to { transform: scale(0); opacity: 0; }
}

.game.gem .spawn { animation: gemSpawn 0.3s ease-out; }
.game.gem .pop   { animation: gemPop 0.2s ease-out forwards; }

@keyframes gemSpawn {
  from { transform: translate3d(var(--x), var(--y), 0) scale(0); opacity: 0; }
  to   { transform: translate3d(var(--x), var(--y), 0) scale(1); opacity: 1; }
}
@keyframes gemPop {
  to { transform: scale(0); opacity: 0; }
}

.game.balloon .spawn { animation: balloonSpawn 0.3s ease-out; }
.game.balloon .pop   { animation: balloonPop 0.2s ease-out forwards; }

@keyframes balloonSpawn {
  from { transform: translate3d(var(--x), var(--y), 0) scale(0); opacity: 0; }
  to   { transform: translate3d(var(--x), var(--y), 0) scale(1); opacity: 1; }
}
@keyframes balloonPop {
  to { transform: translateY(-20px) scale(0); opacity: 0; }
}

.game.fish .spawn { animation: fishSpawn 0.3s ease-out; }
.game.fish .pop   { animation: fishPop 0.25s ease-out forwards; }

.game.fruits .spawn { animation: fruitSpawn 0.3s ease-out; }
.game.fruits .pop   { animation: fruitPop 0.2s ease-out forwards; }

@keyframes fishSpawn {
  from { transform: translate3d(var(--x), var(--y), 0) scale(0); opacity: 0; }
  to   { transform: translate3d(var(--x), var(--y), 0) scale(1); opacity: 1; }
}
@keyframes fishPop {
  to { transform: translateX(var(--flyX)) rotate(360deg); }
}

.game.mole .spawn { animation: moleRise 0.3s forwards; }
.game.mole .pop   { animation: moleFall 0.3s forwards; }

@keyframes moleRise {
  from { height: 0; }
  to   { height: var(--size); }
}

@keyframes moleFall {
  from { height: var(--size); }
  to   { height: 0; }
}


@keyframes fruitSpawn {
  from { transform: translate3d(var(--x), var(--y), 0) scale(0); opacity: 0; }
  to   { transform: translate3d(var(--x), var(--y), 0) scale(1); opacity: 1; }
}
@keyframes fruitPop {
  from { transform: translate3d(var(--x), var(--y), 0) scale(1); opacity: 1; }
  to   { transform: translate3d(var(--x), var(--y), 0) scale(1.5); opacity: 0; }
}

.game.pinata .spawn { animation: pinataSpawn 0.3s ease-out; }
.game.pinata .pop   { animation: pinataPop 0.2s ease-out forwards; }

@keyframes pinataSpawn {
  from { transform: translate3d(var(--x), var(--y), 0) scale(0); opacity: 0; }
  to   { transform: translate3d(var(--x), var(--y), 0) scale(1); opacity: 1; }
}
@keyframes pinataPop {
  to { transform: scale(0); opacity: 0; }
}

@keyframes slideDown {
  from { transform: translate3d(var(--x), var(--y), 0) translateY(0); }
  to   { transform: translate3d(var(--x), var(--y), 0) translateY(var(--dist, 100%)); }
}

.shiftDown {
  animation: slideDown 0.2s ease-out 0.2s forwards;
}

@keyframes dropIn {
  from { transform: translate3d(var(--x), var(--y), 0) translateY(-100%); }
  to   { transform: translate3d(var(--x), var(--y), 0) translateY(0); }
}

.dropIn {
  animation: dropIn 0.2s ease-out 0.2s forwards;
}

/* ---- Gem collections ---- */
.gem-collection {
  position: absolute;
  display: flex;
  flex-direction: column;
  font-size: 32px;
  line-height: 1;
  pointer-events: none;
  gap: 0.5em;
  padding: 0.5em;
  text-shadow: #00000066 0 0 10px;
}
.gem-collection.left  { inset: 0 auto 0 0; }
.gem-collection.right { inset: 0 0 0 auto; }

/* === Pi√±ata animation === */
.sprite.pinata {
  position: fixed;
  top: 50%;
  left: 50%;
  width: var(--size);
  height: var(--size);
  font-size: var(--size);
  display: flex;
  align-items: center;
  justify-content: center;
  transform-origin: 50% calc(-1*var(--string));
}

.sprite.pinata::before {
  content: "";
  position: absolute;
  top: calc(-1*var(--string));
  left: 50%;
  width: 2px;
  height: var(--string);
  background: #333;
  z-index: -1;
}

